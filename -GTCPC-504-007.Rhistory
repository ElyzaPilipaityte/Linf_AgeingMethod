round(params_list[[1]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[1]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["K", "Std. Error"], 2), ")"),
color='#404040', size=5, hjust=0) +
# Add annotations for Linf and K for the second method with standard errors
annotate("text", x=1, y=55,
label=paste0("\nLinf = ",
round(params_list[[2]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[2]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["K", "Std. Error"], 2), ")"),
color='#93003a', size=5, hjust=0)
# Print the plot
print(vbFitPlot1)
perch23otoliths1 <- data2023 %>% filter (spp_name_lt=="Kuoja") %>% select(tl = total_length, age = age_scales2, sex_en) %>% drop_na(age) %>% mutate(reader = "1")
perch23otoliths2 <- data2023 %>% filter (spp_name_lt=="Kuoja") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(reader = "2")
perch <- rbind(perch23otoliths1, perch23otoliths2)
perch$reader <- as.factor(perch$reader)
perch$age <- as.numeric(perch$age)
vb <- vbFuns(param="Typical")     ## Typical VBGF
grps <- unique(perch$reader)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- perch |>              ## Range of observed ages by group
group_by(reader) |>
summarize(min=min(age),
max=max(age))
sv0 <- vbStarts(tl~age,data=perch) ## Starting values ignoring groups
( svLKt <- data.frame(reader=grps,
Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
## Loop notification (for peace of mind)
cat(grp, "Loop\n")
## Isolate group's data, starting values, and age range
dat1 <- dplyr::filter(dat,reader==grp)
sv1 <- svs |>
filter(reader==grp) |>
select(-reader) |>
as.list()
oagerng1 <- filter(oagerng,reader==grp)
## Make ages for predictions
ages <- seq(min(eagerng),max(eagerng),length.out=101)
## Fit von B to that group
fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
## Extract the fitted parameters
fit_params <- summary(fit1)$coefficients
## Make data frame of predicted mean lengths at age with CIs
preds1 <- data.frame(reader=grp,
age=ages,
fit=investr::predFit(fit1,data.frame(age=ages),
interval=interval)) |>
mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
as.data.frame()
## Rename variables
names(preds1) <- c("reader","age","fit","lwr","upr","inrng")
## Return both predictions and the fitted parameters
list(preds = preds1, params = fit_params)
}
preds <- NULL
params_list <- list()
for (i in grps) {
result <- vbLOOP1(i, perch, svLKt, obsagerng, c(0, 20))
preds <- rbind(preds, result$preds)
params_list[[i]] <- result$params  # Store the parameters for each method
}
vbFitPlot1 <- ggplot() +
geom_ribbon(data=preds, aes(x=age, ymin=lwr, ymax=upr, fill=reader), alpha=0.25) +
geom_point(data=perch, aes(x=age, y=tl, color=reader), size=2, alpha=0.3) +
geom_line(data=preds, aes(x=age, y=fit, color=reader), linewidth=1, linetype="dashed") +
geom_line(data=filter(preds, inrng), aes(x=age, y=fit, color=reader), linewidth=1) +
scale_y_continuous(name="Total Length (mm)", limits=c(0, 60)) +
scale_x_continuous(name="Age (years)", breaks=0:20) +
scale_color_manual(values=c('#404040', '#93003a'), aesthetics=c("color", "fill")) +
scale_y_continuous(name=element_blank(), limits=c(0, 70), expand=c(0, 0)) +
scale_x_continuous(name=element_blank(), expand=c(0, 0), limits=c(0, 20), breaks=seq(5, 15, 5)) +
theme_bw() +
theme(panel.grid=element_blank(),
legend.position=c(0.8, 0.2),
axis.title=element_text(size=16),
axis.text=element_text(size=15),
legend.text=element_text(size=15),
legend.title=element_text(size=15)) +
# Add annotations for Linf and K for the first method with standard errors
annotate("text", x=1, y=65,
label=paste0("\nLinf = ",
round(params_list[[1]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[1]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["K", "Std. Error"], 2), ")"),
color='#404040', size=5, hjust=0) +
# Add annotations for Linf and K for the second method with standard errors
annotate("text", x=1, y=55,
label=paste0("\nLinf = ",
round(params_list[[2]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[2]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["K", "Std. Error"], 2), ")"),
color='#93003a', size=5, hjust=0)
perch23otoliths1 <- data2023 %>% filter (spp_name_lt=="Starkis") %>% select(tl = total_length, age = age_scales2, sex_en) %>% drop_na(age) %>% mutate(reader = "1")
perch23otoliths2 <- data2023 %>% filter (spp_name_lt=="Starkis") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(reader = "2")
perch <- rbind(perch23otoliths1, perch23otoliths2)
perch$reader <- as.factor(perch$reader)
perch$age <- as.numeric(perch$age)
vb <- vbFuns(param="Typical")     ## Typical VBGF
grps <- unique(perch$reader)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- perch |>              ## Range of observed ages by group
group_by(reader) |>
summarize(min=min(age),
max=max(age))
sv0 <- vbStarts(tl~age,data=perch) ## Starting values ignoring groups
( svLKt <- data.frame(reader=grps,
Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
## Loop notification (for peace of mind)
cat(grp, "Loop\n")
## Isolate group's data, starting values, and age range
dat1 <- dplyr::filter(dat,reader==grp)
sv1 <- svs |>
filter(reader==grp) |>
select(-reader) |>
as.list()
oagerng1 <- filter(oagerng,reader==grp)
## Make ages for predictions
ages <- seq(min(eagerng),max(eagerng),length.out=101)
## Fit von B to that group
fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
## Extract the fitted parameters
fit_params <- summary(fit1)$coefficients
## Make data frame of predicted mean lengths at age with CIs
preds1 <- data.frame(reader=grp,
age=ages,
fit=investr::predFit(fit1,data.frame(age=ages),
interval=interval)) |>
mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
as.data.frame()
## Rename variables
names(preds1) <- c("reader","age","fit","lwr","upr","inrng")
## Return both predictions and the fitted parameters
list(preds = preds1, params = fit_params)
}
preds <- NULL
params_list <- list()
for (i in grps) {
result <- vbLOOP1(i, perch, svLKt, obsagerng, c(0, 20))
preds <- rbind(preds, result$preds)
params_list[[i]] <- result$params  # Store the parameters for each method
}
perch23otoliths1 <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_scales2, sex_en) %>% drop_na(age) %>% mutate(reader = "1")
perch23otoliths2 <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(reader = "2")
perch <- rbind(perch23otoliths1, perch23otoliths2)
perch$reader <- as.factor(perch$reader)
perch$age <- as.numeric(perch$age)
vb <- vbFuns(param="Typical")     ## Typical VBGF
grps <- unique(perch$reader)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- perch |>              ## Range of observed ages by group
group_by(reader) |>
summarize(min=min(age),
max=max(age))
sv0 <- vbStarts(tl~age,data=perch) ## Starting values ignoring groups
( svLKt <- data.frame(reader=grps,
Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
## Loop notification (for peace of mind)
cat(grp, "Loop\n")
## Isolate group's data, starting values, and age range
dat1 <- dplyr::filter(dat,reader==grp)
sv1 <- svs |>
filter(reader==grp) |>
select(-reader) |>
as.list()
oagerng1 <- filter(oagerng,reader==grp)
## Make ages for predictions
ages <- seq(min(eagerng),max(eagerng),length.out=101)
## Fit von B to that group
fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
## Extract the fitted parameters
fit_params <- summary(fit1)$coefficients
## Make data frame of predicted mean lengths at age with CIs
preds1 <- data.frame(reader=grp,
age=ages,
fit=investr::predFit(fit1,data.frame(age=ages),
interval=interval)) |>
mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
as.data.frame()
## Rename variables
names(preds1) <- c("reader","age","fit","lwr","upr","inrng")
## Return both predictions and the fitted parameters
list(preds = preds1, params = fit_params)
}
preds <- NULL
params_list <- list()
for (i in grps) {
result <- vbLOOP1(i, perch, svLKt, obsagerng, c(0, 20))
preds <- rbind(preds, result$preds)
params_list[[i]] <- result$params  # Store the parameters for each method
}
vbFitPlot1 <- ggplot() +
geom_ribbon(data=preds, aes(x=age, ymin=lwr, ymax=upr, fill=reader), alpha=0.25) +
geom_point(data=perch, aes(x=age, y=tl, color=reader), size=2, alpha=0.3) +
geom_line(data=preds, aes(x=age, y=fit, color=reader), linewidth=1, linetype="dashed") +
geom_line(data=filter(preds, inrng), aes(x=age, y=fit, color=reader), linewidth=1) +
scale_y_continuous(name="Total Length (mm)", limits=c(0, 60)) +
scale_x_continuous(name="Age (years)", breaks=0:20) +
scale_color_manual(values=c('#404040', '#93003a'), aesthetics=c("color", "fill")) +
scale_y_continuous(name=element_blank(), limits=c(0, 70), expand=c(0, 0)) +
scale_x_continuous(name=element_blank(), expand=c(0, 0), limits=c(0, 20), breaks=seq(5, 15, 5)) +
theme_bw() +
theme(panel.grid=element_blank(),
legend.position=c(0.8, 0.2),
axis.title=element_text(size=16),
axis.text=element_text(size=15),
legend.text=element_text(size=15),
legend.title=element_text(size=15)) +
# Add annotations for Linf and K for the first method with standard errors
annotate("text", x=1, y=65,
label=paste0("\nLinf = ",
round(params_list[[1]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[1]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[1]]["K", "Std. Error"], 2), ")"),
color='#404040', size=5, hjust=0) +
# Add annotations for Linf and K for the second method with standard errors
annotate("text", x=1, y=55,
label=paste0("\nLinf = ",
round(params_list[[2]]["Linf", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["Linf", "Std. Error"], 2), ")\n",
"K = ", round(params_list[[2]]["K", "Estimate"], 2),
" (SE ± ", round(params_list[[2]]["K", "Std. Error"], 2), ")"),
color='#93003a', size=5, hjust=0)
perch23otoliths1 <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_scales2, sex_en) %>% drop_na(age) %>% mutate(reader = "1")
perch23otoliths2 <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(reader = "2")
perch <- rbind(perch23otoliths1, perch23otoliths2)
perch$reader <- as.factor(perch$reader)
perch$age <- as.numeric(perch$age)
vb <- vbFuns(param="Typical")     ## Typical VBGF
grps <- unique(perch$reader)          ## Names of groups
ngrps <- length(grps)             ## Number of groups
obsagerng <- perch |>              ## Range of observed ages by group
group_by(reader) |>
summarize(min=min(age),
max=max(age))
sv0 <- vbStarts(tl~age,data=perch) ## Starting values ignoring groups
( svLKt <- data.frame(reader=grps,
Map(rep,sv0,c(ngrps,ngrps,ngrps))) )
vbLOOP1 <- function(grp,dat,svs,oagerng,eagerng,interval="confidence") {
## Loop notification (for peace of mind)
cat(grp, "Loop\n")
## Isolate group's data, starting values, and age range
dat1 <- dplyr::filter(dat,reader==grp)
sv1 <- svs |>
filter(reader==grp) |>
select(-reader) |>
as.list()
oagerng1 <- filter(oagerng,reader==grp)
## Make ages for predictions
ages <- seq(min(eagerng),max(eagerng),length.out=101)
## Fit von B to that group
fit1 <- nls(tl~vb(age,Linf,K,t0),data=dat1,start=sv1)
## Extract the fitted parameters
fit_params <- summary(fit1)$coefficients
## Make data frame of predicted mean lengths at age with CIs
preds1 <- data.frame(reader=grp,
age=ages,
fit=investr::predFit(fit1,data.frame(age=ages),
interval=interval)) |>
mutate(inrng=age>=oagerng1$min & age<=oagerng1$max) |>
as.data.frame()
## Rename variables
names(preds1) <- c("reader","age","fit","lwr","upr","inrng")
## Return both predictions and the fitted parameters
list(preds = preds1, params = fit_params)
}
preds <- NULL
params_list <- list()
for (i in grps) {
result <- vbLOOP1(i, perch, svLKt, obsagerng, c(0, 20))
preds <- rbind(preds, result$preds)
params_list[[i]] <- result$params  # Store the parameters for each method
}
library(tidyverse)
library(FSA)     # for vbFuns(), vbStarts(), headtail(), peek()
theme_set(theme_bw())
library(investr)
library(car)
data2023 <- read_csv(file = "2023.csv")
perch23otoliths <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_Egle, sex_en) %>% drop_na(age)
perch23otoliths <- perch23otoliths %>% mutate(method = "otoliths")
perch23scales <- data2023 %>% filter (spp_name_lt=="Eserys") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(method = "scales")
perch <- rbind(perch23otoliths, perch23scales)
perch$method <- as.factor(perch$method)
roach1 <- data2023 %>% filter (spp_name_lt=="Kuoja") %>% select(tl = total_length, age_ot = age_Egle, age_sc = age_scales, sex_en)
roach23otoliths <- data2023 %>% filter (spp_name_lt=="Kuoja") %>% select(tl = total_length, age = age_Egle, sex_en) %>% drop_na(age)
roach23otoliths <- roach23otoliths %>% mutate(method = "otoliths")
roach23scales <- data2023 %>% filter (spp_name_lt=="Kuoja") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(method = "scales")
roach <- rbind(roach23otoliths, roach23scales)
bream23otoliths <- data2023 %>% filter (spp_name_lt=="Karsis") %>% select(tl = total_length, age = age_Egle, sex_en) %>% drop_na(age)
bream23otoliths <- bream23otoliths %>% mutate(method = "otoliths")
bream23scales <- data2023 %>% filter (spp_name_lt=="Karsis") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(method = "scales")
bream <- rbind(bream23otoliths, bream23scales)
sander23otoliths <- data2023 %>% filter (spp_name_lt=="Starkis") %>% select(tl = total_length, age = age_Egle, sex_en) %>% drop_na(age)
sander23otoliths <- sander23otoliths %>% mutate(method = "otoliths")
sander23scales <- data2023 %>% filter (spp_name_lt=="Starkis") %>% select(tl = total_length, age = age_scales, sex_en) %>% drop_na(age) %>% mutate(method = "scales")
sander <- rbind(sander23otoliths, sander23scales)
700/46
7/0.33
-0.07*100/0.33
rm(list=ls())
library(tidyverse)
library(lme4)
library(sjPlot)
library(dplyr)
library(rfishbase)
library(car)
My_theme <- theme(
panel.background = element_blank(),
panel.border = element_rect(fill = NA, linewidth = 1.25),
strip.background = element_rect(fill = "white", color = "white", linewidth = 1.25),
text = element_text(size = 16, family = "gillsans"),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)
# getting species names from fishbase
fish <- species_names()
data <- read_csv(file = "rfish_Linf_year.csv")
str(data)
ggplot(data, aes(x = year, y = method, fill = method)) +
geom_boxplot() +
xlab("year") +
ylab("method") +
My_theme
data <- data %>% filter(year > 1925)
ggplot(data, aes(x = year, y = method, fill = method)) +
geom_boxplot() +
xlab("year") +
ylab("method") +
My_theme
ggplot(data, aes(x = year, fill = method)) +
geom_bar(position = "dodge") +
xlab("Year") +
ylab("Count") +
scale_x_continuous(breaks = seq(min(data$year), max(data$year), by = 10)) +
My_theme
data_summary <- data %>%
group_by(year, method) %>%
summarise(Frequency = n())
ggplot(data_summary, aes(x = year, y = Frequency, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.2)) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
xlab("Year") + ylab("Frequency of Linf Observations") +
My_theme +
geom_smooth(method = "lm", se = TRUE, size = 1.5)
table(data$year)
table(data$Locality)
table(data$Sex)
table(data$Species)
ggplot(data, aes(x = as.factor(year), y = Loo, color = method)) +
geom_jitter(size = 2) +
My_theme +
facet_wrap(~ Species) +
scale_x_discrete(breaks = unique(data$year)[seq(1, length(unique(data$year)), by = 10)]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data, aes(x = as.factor(year), y = Loo, color = method, shape = Type)) +
geom_jitter(size = 2) +
My_theme +
facet_wrap(~ Species) +
scale_x_discrete(breaks = unique(data$year)[seq(1, length(unique(data$year)), by = 10)]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(shape = "Length Type")
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
str(data)
ggplot(data, aes(x = year, y = method, fill = method)) +
geom_boxplot() +
xlab("year") +
ylab("method") +
My_theme
data <- data %>% filter(year > 1925)
ggplot(data, aes(x = year, y = method, fill = method)) +
geom_boxplot() +
xlab("year") +
ylab("method") +
My_theme
ggplot(data, aes(x = year, fill = method)) +
geom_bar(position = "dodge") +
xlab("Year") +
ylab("Count") +
scale_x_continuous(breaks = seq(min(data$year), max(data$year), by = 10)) +
My_theme
data_summary <- data %>%
group_by(year, method) %>%
summarise(Frequency = n())
ggplot(data_summary, aes(x = year, y = Frequency, color = method)) +
geom_point(size = 3, position = position_dodge(width = 0.2)) +
geom_smooth(method = "lm", se = FALSE, size = 1.5) +
xlab("Year") + ylab("Frequency of Linf Observations") +
My_theme +
geom_smooth(method = "lm", se = TRUE, size = 1.5)
table(data$year)
table(data$Locality)
table(data$Sex)
table(data$Species)
ggplot(data, aes(x = as.factor(year), y = Loo, color = method)) +
geom_jitter(size = 2) +
My_theme +
facet_wrap(~ Species) +
scale_x_discrete(breaks = unique(data$year)[seq(1, length(unique(data$year)), by = 10)]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data, aes(x = as.factor(year), y = Loo, color = method, shape = Type)) +
geom_jitter(size = 2) +
My_theme +
facet_wrap(~ Species) +
scale_x_discrete(breaks = unique(data$year)[seq(1, length(unique(data$year)), by = 10)]) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(shape = "Length Type")
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 35, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 70, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 60, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
ggplot(data, aes(x = Species, y = Loo, fill = method)) +
geom_boxplot() +
theme_minimal() +
xlab("Species") +
ylab("Linf (cm)") +
scale_fill_manual(values = c("scales" = "#DDCC77", "otoliths" = "#6699CC")) +
theme(panel.background = element_rect(fill = "white"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 50, hjust = 1),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14))
